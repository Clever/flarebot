package main

import (
	trace "go.opentelemetry.io/otel/sdk/trace"
	"log"
	"os"
)

// Code generated by launch-gen DO NOT EDIT.

// LaunchConfig is auto-generated based on the launch YML file
type LaunchConfig struct {
	Deps Dependencies
	Env  Environment
	AwsResources
	ExternalUrlUsage
}

// Dependencies has clients for the service's dependencies
type Dependencies struct{}

// Environment has environment variables and their values
type Environment struct {
	FlareChannelPrefix  string
	JiraOrigin          string
	JiraUsername        string
	JiraPassword        string
	SlackBotToken       string
	ChannelAgeThreshold string
	DryRun              string
}

// AwsResources contains string IDs that will help for accessing various AWS resources
type AwsResources struct{}

// ExternalUrlUsage uses discovery to generate urls for external services
type ExternalUrlUsage struct{}

// InitLaunchConfig creates a LaunchConfig
func InitLaunchConfig(exp *trace.SpanExporter) LaunchConfig {
	return LaunchConfig{
		AwsResources: AwsResources{},
		Deps:         Dependencies{},
		Env: Environment{
			ChannelAgeThreshold: requireEnvVar("CHANNEL_AGE_THRESHOLD"),
			DryRun:              requireEnvVar("DRY_RUN"),
			FlareChannelPrefix:  requireEnvVar("FLARE_CHANNEL_PREFIX"),
			JiraOrigin:          requireEnvVar("JIRA_ORIGIN"),
			JiraPassword:        requireEnvVar("JIRA_PASSWORD"),
			JiraUsername:        requireEnvVar("JIRA_USERNAME"),
			SlackBotToken:       requireEnvVar("SLACK_BOT_TOKEN"),
		},
		ExternalUrlUsage: ExternalUrlUsage{},
	}
}

// requireEnvVar exits the program immediately if an env var is not set
func requireEnvVar(s string) string {
	val, present := os.LookupEnv(s)
	if !present {
		log.Fatalf("env var %s is not defined", s)
	}
	return val
}

// getS3NameByEnv adds "-dev" to an env var name unless we're in "production" deploy env
// We check both DEPLOY_ENV and _DEPLOY_ENV env vars, which are injected by our deployment system for Lambda and non-Lambda deployments, respectively
func getS3NameByEnv(s string) string {
	env := os.Getenv("DEPLOY_ENV")
	if env == "" {
		env = os.Getenv("_DEPLOY_ENV")
	}
	if env == "" {
		log.Fatal("Unable to determine deployment environment (DEPLOY_ENV and _DEPLOY_ENV are undefined)")
	}
	if env == "production" {
		return s
	}
	return s + "-dev"
}
